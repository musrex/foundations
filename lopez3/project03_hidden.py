import random

# the size of the 2d array
grid_size = 10
# this variable determines the number of ships to be placed on the board
num_of_ships = 5
# this is the array declaration
grid = [ ['']*grid_size for i in range(grid_size) ]
# we use this list to verify that ships aren't being placed in the same location
ships = []

# we use this list to track the number of sunken ships
sunk = []
# we use this list to tracl the number of empty spaces
water = []

def drawBoard(myBoard):
    '''Summary of Function drawBoard()
    This function takes in a board as a parameter and draws it out.
    The board is generated by the SETUPBOARD() function.

    Parameters
    arg1(2array): a grid that will house the pieces for the game.
    Use the variable GRID_SIZE to set the size of the game board.

    Returns:
    str: A string of the gameboard, with pieces in place.
    '''
    i = j = 0
    # this print statement, repeated throughout this function, creates our horizontal borders
    print("+---+---+---+---+---+---+---+---+---+---+---+")
    # this print statement gives us the top row, horizontal coordinates
    print("| * "," 0 "," 1 "," 2 "," 3 "," 4 "," 5 "," 6 "," 7 "," 8 "," 9 |", sep="|")
    for i in range(grid_size):
        print("+---+---+---+---+---+---+---+---+---+---+---+")
        # this print statement gives the left most row, vertical coordinates
        print("| " + str(i) , end=" |")
        for j in range(grid_size):
            # this print statement "draws" out the ships and spaces on our board
            print("" + myBoard[i][j] , end = "|")
        print()
    print("+---+---+---+---+---+---+---+---+---+---+---+")
    return(myBoard)

def setupBoard():
    '''Summary of Function setupBoard()
    This function takes in no arguments and sets up the board.
    This function places the empty spaces and the ships in the
    appropiate spaces on the board, and keeps track of them for later use.
    '''
    i = j = 0
    while i < grid_size:
        while j < grid_size:
            # store the string "i, j" into the array
            grid[i][j] = " . "
            # we append the empty spaces to a list for tracking and later use
            water.append(grid[i][j])
            j += 1
        j = 0
        i += 1
    
    for x in range(num_of_ships):
        randomCol = random.randint(0, grid_size - 1)
        randomRow = random.randint(0, grid_size - 1)    
        if grid[randomCol][randomRow] not in ships:
            ships.append([randomCol,randomRow])
            # grid[randomRow][randomCol] = " S "
            # we append the ships to a list for tracking and later use
            
            

# this function determines if the user hits or misses a target   
def hitOrMiss(myBoard, col, row):
    '''Summary of Function hitOrMiss()
    This function checks to see if the users input will determine a hit or a miss.

    Parameters:
    arg1 (2d array): This parameter should be the game board created by the SETUPBOARD() function.
    arg2 (int): This parameter should be an int in the range of GRID_SIZE used to determine
    position of users target.
    arg3 (int): This parameter should be an int in the range of GRID_SIZE used to determine
    position of users target.

    Returns:
    boolean: TRUE if the target is a ship, FALSE is the target is empty space/water.
    '''
    # if the users input lands on a ship, we reassign that location to be X
    # and append that location to a list of sunken ships
    # and return TRUE for a hit
    if [col,row] in ships:
        myBoard[col][row] = " X "
        sunk.append([col,row])
        return True
    # otherwise we reassign that location to be an O
    # and return FALSE for a miss
    else:
        myBoard[col][row] = " O "       
        return False

# this function checks if there a
def isGameOver(myBoard):
    '''Summary of Function isGameOver()
    This funcion determines if the game is over or if the game will continue.

    Parameters:
    arg1 (2d array): This parameter should be the game board created by the SETUPBOARD() function.

    Returns:
    boolean: TRUE if the game is over and there are no more ships on the board, FALSE otherwise.
    '''
    # check if there are ships remaining on the grid.
    # if there are ships remaining, return false else return true
    if len(sunk) == len(ships):
                return True
    else:
        return False

if __name__ == "__main__":

    def main(myBoard):
        '''Summary of Function main()
        This function implements and controls our game logic.

        Parameters:
        arg1 (2d array): This parameter should be the game board created by the SETUPBOARD() function.
        '''
    
        print('''
 __  _ ____ ____    ___ ___ _ _ ____ ___ ___ 
| .)/ \_  _|_  _|| |  _|  _| | |_  _|   |  _|
| .\ . |||   || ||_|  _|_  |   |_||_| ._|_  |
|__/_|_|||   || |__|___|___|_|_|____|_| |___| ''')
        # setup the game board
        setupBoard()

        # initiate a while loop to keep the game going until game over condition is met
        run = True
        while run:
            # draw our game board
            drawBoard(myBoard)
            print(ships)
            print("Captain, please enter your coordinates: ")

            # initiate a loop to keep prompting the user for a valid entry
            col = input("Enter a column (X): ")
            if col.lower() == "quit":
                print("Thank you for your service Captain!")
                run = False
                break
            else:
                invalidCol = True
                while invalidCol:
                    try:
                        col = int(col)
                        if  0 > col or col >= 10:
                            print("Invalid column")
                            col = input("Enter a column (X): ")
                        elif 0 <= col or col < 10:
                            invalidCol = False
                    except:
                        print("Invalid column")
                    
            # initiate a loop to keep prompting the user for a valid entry        
            row = input("Enter a column (Y): ") 
            if row.lower() == "quit":
                print("Thank you for your service Captain!")
                run = False
                break
            else:
                invalidRow = True
                while invalidRow:
                    try:
                        row = int(row)
                        if  0 > row or row >= 10:
                            print("Invalid row")
                            row = input("Enter a column (Y): ")
                        elif 0 <= row or row < 10:
                            invalidRow = False
                    except:
                        print("Invalid column")

            print("+---+---+---+---+---+---+---+---+---+---+---+")

            # we use our HITORMISS function to see the outcome of the users input
            if hitOrMiss(myBoard, col, row) == True:
                print("HIT!")
            else:
                print("MISS!")
            # if the user is successful, we print our board one last time, declare
            # the game is over, and end the while loop.
            if isGameOver(myBoard) == True:
                drawBoard(myBoard)
                print("GAME OVER!")
                run = False

# call the main function to initiate the game
    main(grid)


